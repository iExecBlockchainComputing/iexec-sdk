#!/bin/sh
# This is automatically generated by xwconfigure : don't edit
# This aims to generate keystores
#
# Copyrights     : CNRS
# Author         : Oleg Lodygensky
# Acknowledgment : XtremWeb-HEP is based on XtremWeb 1.8.0 by INRIA : http://www.xtremweb.net/
# Web            : http://www.xtremweb-hep.org
# 
#      This file is part of XtremWeb-HEP.
#
#    XtremWeb-HEP is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    XtremWeb-HEP is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with XtremWeb-HEP.  If not, see <http://www.gnu.org/licenses/>.
#
#


##################################################
# fatal()
##################################################
fatal() {
  echo "[`date`] `basename $0` - [FATAL] : $*"
  exit 1
}

##################################################
# error()
##################################################
error() {
  echo "[`date`] `basename $0` - [ERROR] : $*"
}

##################################################
# warn()
##################################################
warn() {
  echo "[`date`] `basename $0` - [WARN] : $*"
}

##################################################
# info()
##################################################
info() {
  echo "[`date`] `basename $0` - [INFO] : $*"
}

##################################################
# main
##################################################

PREFIX=`dirname $0`
BINDIR=$PREFIX/../bin
LIBDIR=$PREFIX/../lib
JARFILE=$LIBDIR/xtremweb.jar
KEYSDIR=$PREFIX/../keystore
X509CERTDIR=
USERCERTDIR=
JETTY=$LIBDIR/jetty-server-9.3.8.v20160314.jar
JETTYUTIL=$LIBDIR/jetty-util-9.3.8.v20160314.jar
JETTYHTTP=$LIBDIR/jetty-http-9.3.8.v20160314.jar
JETTYIO=$LIBDIR/jetty-io-9.3.8.v20160314.jar
JETTYSERVLETAPI=/home/ubuntu/sc16/xtremweb-hep/build/dist/xwhep-10.5.2/lib/servlet-api-3.1.jar

OID_CP="$JARFILE:$JETTY:$JETTYUTIL:$JETTYHTTP:$JETTYIO:$JETTYSERVLETAPI:$LIBDIR/JOpenId-1.08.jar"
OID_MAINCLASS="xtremweb.dispatcher.HTTPOpenIdHandler"

DATE=`date "+%Y%m%d%H%M%S"`

SERVERALIAS="xw.iex.ec"
WORKERALIAS="xtremweb-hep.worker.$DATE"
CLIENTALIAS="xtremweb-hep.client.$DATE"

SERVERFILE=${KEYSDIR}/xwhepserver.keys
CERTFILE=${KEYSDIR}/xwhepcert.pem
WORKERFILE=${KEYSDIR}/xwhepworker.keys
CLIENTFILE=${KEYSDIR}/xwhepclient.keys

CERTNAME="cn=xw.iex.ec,o=iex.ec,c=fr,l=lyon"

OPENSSL=openssl
KEYTOOL=keytool
JARSIGNER=jarsigner
[ "X${JAVA_HOME}" != "X" ] && KEYTOOL=${JAVA_HOME}/bin/keytool
[ "X${JAVA_HOME}" != "X" ] && JARSIGNER=${JAVA_HOME}/bin/jarsigner

type ${KEYTOOL}   > /dev/null 2>&1 || fatal "can't find ${KEYTOOL}"
type ${JARSIGNER} > /dev/null 2>&1 || fatal "can't find ${JARSIGNER}"
type ${OPENSSL}   > /dev/null 2>&1 || fatal "can't find ${OPENSSL}"

#
# This is the server key passphrase
#
SSLKEYPASSPHRASE=sc16_iexec
#
# This is the server keystore password
#
SSLKeyServerpassword=serverp
#
# This is both the worker key passphrase and worker keystore password 
# since worker is distributed on unsecure nodes...
#
SSLKeyWorkerpassword=workerp
#
# This is both the client key passphrase and client keystore password 
# since client is distributed on unsecure nodes...
#
SSLKeyClientpassword=clientp


[ ! -d ${KEYSDIR} ]   && mkdir -p ${KEYSDIR}

#
# private + public server keys (not to be distributed):
#
# a keystore can contain several keys identified by their alias
#
if [ -f  ${SERVERFILE} ] ; then
	info "Updating server keystore file ${SERVERFILE}"
else
	info "Generating server keystore file ${SERVERFILE}"
#	SERVERALIAS="xw.iex.ec.$DATE"
fi


SERVERCERTNAME=${SERVERALIAS}.pem
SERVERCERT=${KEYSDIR}/${SERVERCERTNAME}
SERVERKEYNAME=${SERVERALIAS}.key
SERVERKEY=${KEYSDIR}/${SERVERKEYNAME}
SERVERP12NAME=${SERVERALIAS}.p12
SERVERP12=${KEYSDIR}/${SERVERP12NAME}

IMPORTKEY=1
[ ! -r ${SERVERCERT} ] && IMPORTKEY=0
[ ! -r ${SERVERKEY}  ] && IMPORTKEY=0

if [ $IMPORTKEY -eq 1 ] ; then
	info "Certificates found; importing certificates into server keystore"
#	SERVERALIAS="xw.iex.ec"

##	${KEYTOOL} -exportcert -keystore ${SERVERFILE} -alias ${SERVERALIAS} -file ${CERTFILE}                 -storepass "${SSLKeyServerpassword}" -rfc
#	${KEYTOOL} -export -keystore ${SERVERFILE} -alias ${SERVERALIAS} -file ${CERTFILE} -storepass "${SSLKeyServerpassword}" -rfc
#	[ $? -ne 0 ] && fatal "${KEYTOOL} : something is wrong with found certificates"
#	${OPENSSL} x509 -in ${CERTFILE}  -text -noout
#	[ $? -ne 0 ] && fatal "${OPENSSL} : something is wrong with found certificates"

	${OPENSSL} pkcs12 -export -in ${SERVERCERT} -inkey ${SERVERKEY} -out ${SERVERP12}  -passout pass:${SSLKeyServerpassword} -name ${SERVERALIAS} 
	[ $? -ne 0 ] && fatal "${OPENSSL} : can't translate found certificates to PKCS12"
	${KEYTOOL} -importkeystore -srckeystore ${SERVERP12} -srcstoretype pkcs12 -destkeystore ${SERVERFILE} -deststoretype jks -srcstorepass ${SSLKeyServerpassword} -deststorepass ${SSLKeyServerpassword}  -destkeypass "${SSLKEYPASSPHRASE}" -srcalias ${SERVERALIAS} -destalias ${SERVERALIAS} 
	[ $? -ne 0 ] && fatal "${KEYTOOL} : can't import keystore from found certificates"
	${KEYTOOL} -export -keystore ${SERVERFILE} -alias ${SERVERALIAS} -file ${CERTFILE} -storepass "${SSLKeyServerpassword}" -rfc
	[ $? -ne 0 ] && fatal "${KEYTOOL} : can't export public key from found certificates"
else
	info "No certificate found; creating self signed ones"
	${KEYTOOL} -genkey -dname "${CERTNAME}" -alias ${SERVERALIAS} -storepass "${SSLKeyServerpassword}" -keypass "${SSLKEYPASSPHRASE}" -keystore ${SERVERFILE} -validity 365 -v  -keyalg RSA -keysize 2048
	[ $? -ne 0 ] && fatal "can't create self signed certificates"
	${KEYTOOL} -export     -keystore ${SERVERFILE} -alias ${SERVERALIAS} -file ${CERTFILE} -storepass "${SSLKeyServerpassword}" -v
	[ $? -ne 0 ] && fatal "can't export self signed public key"
fi

${KEYTOOL} -list  -keystore ${SERVERFILE} -storepass "${SSLKeyServerpassword}"
[ $? -ne 0 ] && fatal "can't list server certificates"

#
# xwcert.keys: server public key (to be disributed)
#
${KEYTOOL} -printcert -file ${CERTFILE}
[ $? -ne 0 ] && fatal "can't print server certificates"

#
# Generating worker keystore
#
if [ -f  ${WORKERFILE} ] ; then
  info "Updating worker keystore file ${WORKERFILE}"
else
  info "Generating worker keystore file ${WORKERFILE}"
fi

${KEYTOOL} -genkey -dname "${CERTNAME}" -alias ${WORKERALIAS} -storepass "${SSLKeyWorkerpassword}" -keypass "${SSLKeyWorkerpassword}" -keystore ${WORKERFILE} -v  -keyalg RSA -keysize 2048
[ 0 -ne 0 ] && fatal "can't generate worker keystore"
info "Importing server public key into worker keystore (${WORKERFILE})"
${KEYTOOL} -import -alias ${SERVERALIAS} -file ${CERTFILE} -trustcacerts -keystore ${WORKERFILE} -storepass "${SSLKeyWorkerpassword}" -v -noprompt
[ 0 -ne 0 ] && fatal "can't import server public key into worker keystore"
${KEYTOOL} -list  -keystore ${WORKERFILE} -storepass "${SSLKeyWorkerpassword}"
[ $? -ne 0 ] && fatal "can't list certificates from worker keystore"

#
# Generating client keystore
#
if [ -f  ${CLIENTFILE} ] ; then
  info "Updating client keystore file ${CLIENTFILE}"
else
  info "Generating client keystore file ${CLIENTFILE}"
fi

${KEYTOOL} -genkey -dname "${CERTNAME}" -alias ${CLIENTALIAS} -storepass "${SSLKeyClientpassword}" -keypass "${SSLKeyClientpassword}" -keystore ${CLIENTFILE} -v  -keyalg RSA  -keysize 2048
[ 0 -ne 0 ] && fatal "can't generate client keystore"
info "Importing server public key into client keystore (${WORKERFILE})"
${KEYTOOL} -import -alias ${SERVERALIAS} -file ${CERTFILE} -trustcacerts -keystore ${CLIENTFILE} -storepass "${SSLKeyClientpassword}" -v -noprompt
[ 0 -ne 0 ] && fatal "can't import server public key into client keystore"
${KEYTOOL} -list  -keystore ${CLIENTFILE} -storepass "${SSLKeyClientpassword}"
[ $? -ne 0 ] && fatal "can't list certificates from client keystore"


#
# Signing jar file
#
info "Signing jar file ${JARFILE}"
${JARSIGNER} -storepass "${SSLKeyServerpassword}" -keypass "${SSLKEYPASSPHRASE}" -keystore ${SERVERFILE} ${JARFILE} ${SERVERALIAS}
[ $? -ne 0 ] && warn "can't sign jar file"
${JARSIGNER} -verify -keystore ${WORKERFILE} ${JARFILE}
[ $? -ne 0 ] && warn "can't verify signed jar file"

info "Done"

