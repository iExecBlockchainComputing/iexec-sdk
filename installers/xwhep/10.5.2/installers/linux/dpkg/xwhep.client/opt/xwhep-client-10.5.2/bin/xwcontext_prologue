#!/bin/bash

#
# Copyrights     : CNRS
# Author         : Oleg Lodygensky
# Acknowledgment : XtremWeb-HEP is based on XtremWeb 1.8.0 by inria : http://www.xtremweb.net/
# Web            : http://www.xtremweb-hep.org
#
#      This file is part of XtremWeb-HEP.
#
#    XtremWeb-HEP is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    XtremWeb-HEP is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with XtremWeb-HEP.  If not, see <http://www.gnu.org/licenses/>.
#
#



#  ******************************************************************
#  File    : xwcontext_prologue
#  Date    : August 31st, 2012
#  Author  : Oleg Lodygensky
# 
#  OS      : Linux
#  Arch    : noarch
# 
#  Purpose : this brings up/down contextualization
#            contextualization disk is mounted on /mnt/xwcontext
#            this is HEPiX compliant contextualisation epilog
#            this is based on http://grid.desy.de/vm/hepix/vwg/doc/html/start/contextualisation-principles-cern-status.shtml 
#
#  See     : ubuntu_createlivecd.sh; sl5_createlivecd.sh; sl6_createlivecd.sh; sl6_createlivecd.ks; xwcontext_epilogue
#
# Mount points:
#   - /mnt/xwcontext is the mount point of /dev/sda1, if provided
#   - /mnt/app       is the mount point of /dev/sdb1, if provided
#   - /mnt/input     is the mount point of /dev/sdc1, if provided
#   - /mnt/results   is the mount point of /dev/sdd1, if provided
#   - if /dev/sdd1 is not provided, a new 10Gb ext3 partition 
#        is created on /dev/sdd1 and mounted on /mnt/results 
#
# Changelog:
#             $Log: vmcontext,v $
# - aug 8th, 2012 : Oleg Lodygensky
#   Initial version
# - jan 1st, 2014 : Oleg Lodygensky
#   introducing application disk : /dev/sda1 mounted on /mnt/app
#   application disk is ignored if /dev/sda1 does not exist
#   introducing input files disk : /dev/sdb1 mounted on /mnt/input
#   input files disk is ignored if /dev/sdb1 does not exist
#   introducing results disk     : /dev/sdc  mounted on /mnt/results (this replaces /mnt/xwscratch)
#   results disk is created if /dev/sdc1 does not exist
# - jul 11th, 2014 : Oleg Lodygensky
#   contextualization, app and input disk may be CD
# - dec 4th, 2014 : Oleg Lodygensky
#   enabling VirtualBox shared file systems
#

# chkconfig: 2345 2 99
# description: XWHEP contextualization prolog

LOGFILE=/var/log/xwcontext_prologue.log
MNTCONTEXT=/mnt/xwcontext
MNTAPP=/mnt/app
MNTINPUT=/mnt/input
MNTRESULTS=/mnt/results
PROLOG=$MNTCONTEXT/prolog.sh
INITSH=$MNTCONTEXT/init.sh
CONTEXTSH=$MNTCONTEXT/context.sh


#  ******************************************************************
# start()
#  ******************************************************************
start() {

#
# randomize passwords
#
	PASSWD=`dd if=/dev/urandom count=50|md5sum`

    touch $LOGFILE
    echo $"[`date`] XWHEP Volunteer Cloud [INFO]: contextualization prolog" >> $LOGFILE 2>&1
	/usr/sbin/groupadd -f vmuser >> $LOGFILE 2>&1
	/usr/sbin/useradd -d /home/vmuser -g vmuser -p "$PASSWD" -m -s /bin/bash vmuser >> $LOGFILE 2>&1


#
# randomize passwords
#
#	dd if=/dev/urandom count=50|md5sum|passwd --stdin vmuser >> $LOGFILE 2>&1
#	dd if=/dev/urandom count=50|md5sum|passwd --stdin root >> $LOGFILE 2>&1

#
# contextualization disk
#

# Ubuntu & Debian HDD
	UDISK=/dev/hda1
# Scientific Linux HDD
	SLDISK=/dev/sda1
#  CD
	CDDISK=/dev/sr1


	echo "[`date`] XWHEP Volunteer Cloud [INFO]: Looking for context disk in ${CDDISK}, ${SLDISK} or ${UDISK}" >> $LOGFILE 2>&1

    if [ -b ${CDDISK} ]; then
		disk=${CDDISK}
    elif [ -b ${SLDISK} ]; then
		disk=${SLDISK}
	elif [ -b ${UDISK} ]; then
		disk=${UDISK}
    fi

    echo "[`date`] XWHEP Volunteer Cloud [INFO]: trying to mount context disk ${disk}" >> $LOGFILE 2>&1
	mkdir -p $MNTCONTEXT >> $LOGFILE 2>&1
    mount ${disk} $MNTCONTEXT >> $LOGFILE 2>&1
    RETVAL=$?

    if [ 0 -eq $RETVAL ] ; then

		/bin/chown -R vmuser:vmuser $MNTCONTEXT >> $LOGFILE 2>&1

        if [ -e $PROLOG ]; then
              echo "[`date`] XWHEP Volunteer Cloud [INFO]: found $PROLOG" >> $LOGFILE 2>&1
              chmod +x $PROLOG >> $LOGFILE 2>&1
              /bin/su -l vmuser bash -c $PROLOG >> $LOGFILE 2>&1
	         RETVAL=$?
        elif [ -e $INITSH ]; then
             echo "[`date`] XWHEP Volunteer Cloud [INFO]: found $INITSH" >> $LOGFILE 2>&1
             chmod +x $INITSH >> $LOGFILE 2>&1
             /bin/su -l vmuser bash -c $INITSH >> $LOGFILE 2>&1
	         RETVAL=$?
        elif [ -e $CONTEXTSH ]; then
             echo "[`date`] XWHEP Volunteer Cloud [INFO]: found $CONTEXTSH" >> $LOGFILE 2>&1
             chmod +x $CONTEXTSH >> $LOGFILE 2>&1
             /bin/su -l vmuser bash -c $CONTEXTSH >> $LOGFILE 2>&1
	         RETVAL=$?
        else
         	echo "[`date`] XWHEP Volunteer Cloud [WARN]: no contextualization prolog found" >> $LOGFILE 2>&1
         	RETVAL=0
        fi
    else
    	rm -Rf $MNTCONTEXT >> $LOGFILE 2>&1
        echo "[`date`] XWHEP Volunteer Cloud [WARN]: no mountable contextualization disk." >> $LOGFILE 2>&1
        RETVAL=0
	fi

	[ 0 -eq $RETVAL ] || echo "[`date`] XWHEP Volunteer Cloud [ERROR] : contextualization error (${disk})" >> $LOGFILE 2>&1

#
# mount application disk, if any
#
	UDISK=/dev/hdb1
	SLDISK=/dev/sdb1
	CDDISK=/dev/sr2

	echo "[`date`] XWHEP Volunteer Cloud [INFO]: looking for application disk in ${CDDISK}, ${SLDISK} or ${UDISK}" >> $LOGFILE 2>&1

	disk=""
    if [ -b ${CDDISK} ]; then
		disk=${CDDISK}
    elif [ -b ${SLDISK} ] ; then
		disk=${SLDISK}
	elif [ -b ${UDISK} ] ; then
		disk=${UDISK}
	fi

	if [ ! -z "${disk}" ] ; then
	    echo "[`date`] XWHEP Volunteer Cloud [INFO]: trying to mount application disk ${disk}" >> $LOGFILE 2>&1
		mkdir -p $MNTAPP >> $LOGFILE 2>&1
	    mount ${disk} $MNTAPP >> $LOGFILE 2>&1
    	RETVAL=$?
		/bin/chown -R vmuser:vmuser $MNTAPP >> $LOGFILE 2>&1
	else
    	rm -Rf $MNTAPP >> $LOGFILE 2>&1
        echo "[`date`] XWHEP Volunteer Cloud [WARN] : can't find any application disk" >> $LOGFILE 2>&1
        RETVAL=0
	fi

	[ 0 -eq $RETVAL ] || echo "[`date`] XWHEP Volunteer Cloud [ERROR] : application volume error (${disk})" >> $LOGFILE 2>&1

#
# mount input files disk, if any
#
	UDISK=/dev/hdc1
	SLDISK=/dev/sdc1
	CDDISK=/dev/sr3

	echo "[`date`] XWHEP Volunteer Cloud [INFO]: looking for input disk in ${CDDISK}, ${SLDISK} or ${UDISK}" >> $LOGFILE 2>&1

	disk=""
    if [ -b ${CDDISK} ]; then
		disk=${CDDISK}
    elif [ -b ${SLDISK} ] ; then
		disk=${SLDISK}
	elif [ -b ${UDISK} ] ; then
		disk=${UDISK}
	fi

	if [ ! -z "${disk}" ] ; then
	    echo "[`date`] XWHEP Volunteer Cloud [INFO]: trying to mount input disk ${disk}" >> $LOGFILE 2>&1
		mkdir -p $MNTINPUT >> $LOGFILE 2>&1
	    mount ${disk} $MNTINPUT >> $LOGFILE 2>&1
    	RETVAL=$?
		/bin/chown -R vmuser:vmuser $MNTINPUT >> $LOGFILE 2>&1
	else
    	rm -Rf $MNTINPUT >> $LOGFILE 2>&1
        echo "[`date`] XWHEP Volunteer Cloud [WARN]: can't find any input disk" >> $LOGFILE 2>&1
        RETVAL=0
	fi

	[ 0 -eq $RETVAL ] || echo "[`date`] XWHEP Volunteer Cloud [ERROR]: input volume error (${disk})" >> $LOGFILE 2>&1

#
# create and mount a result disk, if device available
#
	UDEV=/dev/hdd
	UDISK=${UDEV}1
	SLDEV=/dev/sdd
	SLDISK=${SLDEV}1

	echo "[`date`] XWHEP Volunteer Cloud [INFO]: looking for result disk in ${SLDISK} or ${UDISK}" >> $LOGFILE 2>&1

	if [ -b ${SLDEV} ] ; then
		device=${SLDEV}
	elif [ -b ${UDEV} ] ; then
		device=${UDEV}
	fi

	disk=""
	if [ -b "$device" ] ; then
		disk=${device}1
	else
 		echo "[`date`] XWHEP Volunteer Cloud [WARN] : can't find any device to store result " >> $LOGFILE 2>&1
		RETVAL=0
	fi

	/bin/mkdir -p $MNTRESULTS >> $LOGFILE 2>&1

	if [ ! -b ${disk} ] ; then
		/sbin/fdisk ${device} << FDISKEOF
n
p
1


w
FDISKEOF

		[ 0 -eq $? ] || echo "[`date`] XWHEP Volunteer Cloud [ERROR]: cannot fdisk ${disk}" >> $LOGFILE 2>&1

		/sbin/mkfs.ext3 ${disk} >> $LOGFILE 2>&1
		[ 0 -eq $? ] || echo "[`date`] XWHEP Volunteer Cloud [ERROR]: cannot mkfs ${disk}" >> $LOGFILE 2>&1
	fi

	/bin/mount ${disk} ${MNTRESULTS} >> $LOGFILE 2>&1
	RETVAL=$?
	[ 0 -eq $RETVAL ] || echo "[`date`] XWHEP Volunteer Cloud [ERROR]: cannot mount ${disk} to $MNTRESULTS" >> $LOGFILE 2>&1


	/bin/chown -R vmuser:vmuser $MNTRESULTS >> $LOGFILE 2>&1
	[ 0 -eq $RETVAL ] || echo "[`date`] XWHEP Volunteer Cloud [ERROR]: cannot chown -R vmuser:vmuser $MNTRESULTS" >> $LOGFILE 2>&1
	
	#
	# configure iptables
	#
	if [ -f /root/iptables_rules.sh ] ; then
	  chmod +x /root/iptables_rules.sh >> $LOGFILE 2>&1
	  /root/iptables_rules.sh >> $LOGFILE 2>&1
	  RETVAL=$?
	  if [ 0 -eq $RETVAL ] ; then
	    echo "[`date`] XWHEP Volunteer Cloud [INFO]: iptables rules found; LAN access not allowed" >> $LOGFILE 2>&1
	  else
	    echo "[`date`] XWHEP Volunteer Cloud [ERROR]: cannot execute /root/iptables_rules.sh" >> $LOGFILE 2>&1
	  fi
	else
	  echo "[`date`] XWHEP Volunteer Cloud [WARN]: iptables rules not found ; LAN access allowed" >> $LOGFILE 2>&1
	fi

	
	#
	# start XWHEP server, if installed
	#
	[ -x /etc/init.d/xtremweb.server ] && /etc/init.d/xtremweb.server restart >> $LOGFILE 2>&1
	
	#
	# start XWHEP worker, if installed
	#
	[ -x /etc/init.d/xtremweb.worker ] && /etc/init.d/xtremweb.worker restart >> $LOGFILE 2>&1

    if [ 0 -eq $RETVAL ]; then
      echo $"XWHEP contextualization epilog:                            [  OK  ]"
    else
      echo $"XWHEP contextualization epilog:                            [  FAILED  ]"
    fi

	#
	# trying to mount VirtualBox shared file system
	#
	mkdir -p /mnt/sharedfs >> $LOGFILE 2>&1
	XWUSERUID=`id -u vmuser`
	mount xwsharedfs -t vboxsf /mnt/sharedfs -o rw,uid=$XWUSERUID >> $LOGFILE 2>&1

	echo "[`date`] XWHEP Volunteer Cloud [DEBUG]: RETVAL=$RETVAL" >> $LOGFILE 2>&1
    return $RETVAL
}


#  ******************************************************************
# stop()
#  ******************************************************************
stop() {
    echo "[`date`] XWHEP Volunteer Cloud [INFO]: xwcontext_prologue stop does nothing" >> $LOGFILE 2>&1
    return 0
}


#  ******************************************************************
# main
#  ******************************************************************

case "$1" in
    start)
#                 [ $running -eq 0 ] && exit 0
                  start
                  RETVAL=$?
                  ;;
    stop)
#                [ $running -eq 0 ] || exit 0
                 stop
                 RETVAL=$?
                 ;;
    status)
			    echo "This does nothing"
    			RETVAL=0
                 ;;
        *)
        echo $"Usage: $0 {start|stop}"
        RETVAL=2
esac
exit $RETVAL

