services:
  custom-token-chain:
    restart: unless-stopped
    image: 'iexechub/poco-chaintest:5.3.2-token-openethereum'
    expose:
      - 8545
    ports:
      - 18545:8545
    healthcheck:
      test: nc -z 0.0.0.0 8545
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  bellecour-fork:
    restart: 'no'
    image: ghcr.io/foundry-rs/foundry:v1.0.0
    entrypoint: anvil
    command: '--host 0.0.0.0 --port 8545 --block-time 1 --hardfork berlin --fork-url $BELLECOUR_FORK_URL --fork-block-number $BELLECOUR_FORK_BLOCK --chain-id 134 --gas-limit 6700000 --gas-price 0'
    expose:
      - 8545
    ports:
      - 8545:8545
    healthcheck:
      # check port 8545 is open without nc
      test: (echo >/dev/tcp/$(hostname)/8545) &>/dev/null
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  voucher-subgraph-deployer:
    restart: 'no'
    # https://github.com/iExecBlockchainComputing/iexec-voucher-subgraph
    image: iexechub/voucher-subgraph-deployer:1.0.0
    environment:
      RPC_URL: http://bellecour-fork:8545
      GRAPHNODE_URL: http://graphnode:8020
      IPFS_URL: http://ipfs:5001
      VOUCHER_HUB_ADDRESS: '0x3137B6DF4f36D338b82260eDBB2E7bab034AFEda'
      VOUCHER_HUB_START_BLOCK: $BELLECOUR_FORK_BLOCK
    depends_on:
      bellecour-fork:
        condition: service_healthy
      graphnode:
        condition: service_healthy
      ipfs:
        condition: service_healthy

  graphnode-postgres:
    image: postgres:12
    restart: unless-stopped
    command:
      - 'postgres'
      - '-cshared_preload_libraries=pg_stat_statements'
    expose:
      - 5432
    environment:
      POSTGRES_USER: graphnode
      POSTGRES_PASSWORD: password
      POSTGRES_DB: graphnode-db
    healthcheck:
      test: pg_isready -U graphnode -d graphnode-db
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  graphnode:
    image: graphprotocol/graph-node:v0.27.0
    restart: unless-stopped
    expose:
      - 8000
      - 8020
    ports:
      # GraphQL HTTP
      - 8000:8000
      # GraphQL WS
      # - 8001:8001
      # admin RPC
      - 8020:8020
      # metrics
      # - 8040:8040
    environment:
      postgres_host: graphnode-postgres
      postgres_port: 5432
      postgres_user: graphnode
      postgres_pass: password
      postgres_db: graphnode-db
      ipfs: ipfs:5001
      ethereum: bellecour:http://bellecour-fork:8545
      GRAPH_ETHEREUM_GENESIS_BLOCK_NUMBER: $BELLECOUR_FORK_BLOCK
    depends_on:
      bellecour-fork:
        condition: service_healthy
      graphnode-postgres:
        condition: service_healthy
      ipfs:
        condition: service_healthy
    healthcheck:
      test: netcat -w 1 0.0.0.0 8020
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  service-internal-error:
    image: nginx:alpine
    volumes:
      - $PWD/mock/server/http500.nginx.conf:/etc/nginx/conf.d/default.conf
    expose:
      - 80
    ports:
      - 5500:80

  sms:
    image: iexechub/iexec-sms:8.7.0
    restart: unless-stopped
    environment:
      JAVA_TOOL_OPTIONS: '-Xmx256M'
      IEXEC_SMS_BLOCKCHAIN_NODE_ADDRESS: http://bellecour-fork:8545
      IEXEC_HUB_ADDRESS: '0x3eca1B216A7DF1C7689aEb259fFB83ADFB894E7f'
      IEXEC_SMS_TEE_RUNTIME_FRAMEWORK: scone
      IEXEC_SMS_IMAGE_LAS_IMAGE: 'las-image'
      IEXEC_TEE_WORKER_PRE_COMPUTE_IMAGE: 'pre-compute-image'
      IEXEC_TEE_WORKER_PRE_COMPUTE_FINGERPRINT: 'pre-compute-fingerprint'
      IEXEC_TEE_WORKER_POST_COMPUTE_IMAGE: 'post-compute-image'
      IEXEC_TEE_WORKER_POST_COMPUTE_FINGERPRINT: 'post-compute-fingerprint'
    ports:
      - 13300:13300
    healthcheck:
      test: curl -f localhost:13300/actuator/health || exit 1
    depends_on:
      bellecour-fork:
        condition: service_healthy

  result-proxy:
    image: iexechub/iexec-result-proxy:7.1.0
    restart: unless-stopped
    environment:
      IEXEC_PRIVATE_CHAIN_ADDRESS: http://bellecour-fork:8545
      IEXEC_PUBLIC_CHAIN_ADDRESS: http://bellecour-fork:8545
      IEXEC_HUB_ADDRESS: '0x3eca1B216A7DF1C7689aEb259fFB83ADFB894E7f'
      MONGO_HOST: result-proxy-mongo
      MONGO_PORT: 13202
      IEXEC_IPFS_HOST: ipfs
    ports:
      - 13200:13200
    depends_on:
      bellecour-fork:
        condition: service_healthy
      result-proxy-mongo:
        condition: service_started
      ipfs:
        condition: service_healthy

  result-proxy-mongo:
    restart: unless-stopped
    image: library/mongo:4.2
    entrypoint: '/bin/bash'
    command: -c "mongod --bind_ip_all --port 13202"
    expose:
      - 13202
    ports:
      - 13202:13202

  ipfs:
    restart: unless-stopped
    image: ipfs/go-ipfs:v0.9.1
    expose:
      - 8080
      - 5001
    ports:
      - 8080:8080
      - 5001:5001
    healthcheck:
      test: nc -z 0.0.0.0 8080 && nc -z 0.0.0.0 5001
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  market-mongo:
    image: mongo:6.0.3
    restart: unless-stopped
    expose:
      - 27017
    ports:
      - 27017:27017

  market-redis:
    image: redis:7.0.7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    expose:
      - 6379
    ports:
      - 6379:6379
    healthcheck:
      test: nc -z 0.0.0.0 6379
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  market-watcher:
    image: iexechub/iexec-market-watcher:6.4
    restart: unless-stopped
    environment:
      CHAIN: BELLECOUR
      START_BLOCK: $BELLECOUR_FORK_BLOCK
      ETH_WS_HOST: ws://bellecour-fork:8545
      ETH_RPC_HOST: http://bellecour-fork:8545
      MONGO_HOST: market-mongo
      REDIS_HOST: market-redis
    depends_on:
      bellecour-fork:
        condition: service_healthy
      market-redis:
        condition: service_healthy
      market-mongo:
        condition: service_started

  market-api:
    image: iexechub/iexec-market-api:6.4
    restart: unless-stopped
    ports:
      - 3000:3000
    expose:
      - 3000
    environment:
      CHAINS: BELLECOUR_FORK
      BELLECOUR_FORK_ETH_RPC_HOST: http://bellecour-fork:8545
      BELLECOUR_FORK_CHAIN_ID: 134
      BELLECOUR_FORK_IS_NATIVE: 'true'
      BELLECOUR_FORK_IEXEC_ADDRESS: '0x3eca1B216A7DF1C7689aEb259fFB83ADFB894E7f'
      MONGO_HOST: market-mongo
      REDIS_HOST: market-redis
      RATE_LIMIT_MAX: 10000
      RATE_LIMIT_PERIOD: 60000
      MAX_OPEN_ORDERS_PER_WALLET: 1000
    depends_on:
      bellecour-fork:
        condition: service_healthy
      market-redis:
        condition: service_healthy
      market-mongo:
        condition: service_started

  stack-ready:
    image: bash
    command:
      - echo "all services ready"
    depends_on:
      bellecour-fork:
        condition: service_healthy
      custom-token-chain:
        condition: service_healthy
      graphnode:
        condition: service_healthy
      sms:
        condition: service_healthy
      market-watcher:
        condition: service_started
      market-api:
        condition: service_started
      result-proxy:
        condition: service_started
      voucher-subgraph-deployer:
        condition: service_completed_successfully
