kind: pipeline
type: docker
name: default

trigger:
  event:
    exclude:
      - promote
      - pull_request

steps:
  ##### START LOCAL STACK #####

  - name: sms
    image: iexechub/iexec-sms:8.7.0
    detach: true
    environment:
      JAVA_TOOL_OPTIONS: '-Xmx256M'
      IEXEC_SMS_BLOCKCHAIN_NODE_ADDRESS: http://bellecour-fork:8545
      IEXEC_HUB_ADDRESS: '0x3eca1B216A7DF1C7689aEb259fFB83ADFB894E7f'
      IEXEC_SMS_TEE_RUNTIME_FRAMEWORK: scone
      IEXEC_SMS_IMAGE_LAS_IMAGE: 'las-image'
      IEXEC_TEE_WORKER_PRE_COMPUTE_IMAGE: 'pre-compute-image'
      IEXEC_TEE_WORKER_PRE_COMPUTE_FINGERPRINT: 'pre-compute-fingerprint'
      IEXEC_TEE_WORKER_POST_COMPUTE_IMAGE: 'post-compute-image'
      IEXEC_TEE_WORKER_POST_COMPUTE_FINGERPRINT: 'post-compute-fingerprint'
    expose:
      - 13300
    depends_on:
      - bellecour-fork-healthy

  - name: sms-healthy
    image: bash
    commands:
      - while ! nc -z sms 13300 ; do sleep 1 ; done && echo "sms ready"
    depends_on:
      - sms

  - name: sms-gramine
    image: iexechub/iexec-sms:8.7.0
    detach: true
    environment:
      JAVA_TOOL_OPTIONS: '-Xmx256M'
      IEXEC_SMS_BLOCKCHAIN_NODE_ADDRESS: http://bellecour-fork:8545
      IEXEC_HUB_ADDRESS: '0x3eca1B216A7DF1C7689aEb259fFB83ADFB894E7f'
      IEXEC_SMS_TEE_RUNTIME_FRAMEWORK: scone
      IEXEC_SMS_IMAGE_LAS_IMAGE: 'las-image'
      IEXEC_TEE_WORKER_PRE_COMPUTE_IMAGE: 'pre-compute-image'
      IEXEC_TEE_WORKER_PRE_COMPUTE_FINGERPRINT: 'pre-compute-fingerprint'
      IEXEC_TEE_WORKER_POST_COMPUTE_IMAGE: 'post-compute-image'
      IEXEC_TEE_WORKER_POST_COMPUTE_FINGERPRINT: 'post-compute-fingerprint'
    expose:
      - 13300
    depends_on:
      - bellecour-fork-healthy

  - name: sms-gramine-healthy
    image: bash
    commands:
      - while ! nc -z sms-gramine 13300 ; do sleep 1 ; done && echo "sms ready"
    depends_on:
      - sms

  - name: result-proxy
    image: iexechub/iexec-result-proxy:7.1.0
    detach: true
    environment:
      IEXEC_PRIVATE_CHAIN_ADDRESS: http://bellecour-fork:8545
      IEXEC_PUBLIC_CHAIN_ADDRESS: http://bellecour-fork:8545
      IEXEC_HUB_ADDRESS: '0x3eca1B216A7DF1C7689aEb259fFB83ADFB894E7f'
      MONGO_HOST: result-proxy-mongo
      MONGO_PORT: 13202
      IEXEC_IPFS_HOST: ipfs
    expose:
      - 13200
    depends_on:
      - bellecour-fork-healthy
      - ipfs-healthy
      - result-proxy-mongo-healthy

  - name: result-proxy-healthy
    image: bash
    commands:
      - while ! nc -z result-proxy 13200 ; do sleep 1 ; done && echo "result-proxy ready"
    depends_on:
      - result-proxy

  - name: market-watcher
    image: iexechub/iexec-market-watcher:6.4
    detach: true
    environment:
      CHAIN: BELLECOUR
      ETH_WS_HOST: ws://bellecour-fork:8545
      ETH_RPC_HOST: http://bellecour-fork:8545
      MONGO_HOST: market-mongo
      REDIS_HOST: market-redis
    commands:
      - export START_BLOCK=$(cat local-stack-env/BELLECOUR_FORK_BLOCK)
      - cd /app
      - npm start
    depends_on:
      - prepare-local-stack-env
      - bellecour-fork-healthy
      - market-redis-healthy
      - market-mongo-healthy

  - name: market-api
    image: iexechub/iexec-market-api:6.4
    detach: true
    expose:
      - 3000
    environment:
      CHAINS: BELLECOUR_FORK
      BELLECOUR_FORK_ETH_RPC_HOST: http://bellecour-fork:8545
      BELLECOUR_FORK_CHAIN_ID: 134
      BELLECOUR_FORK_IS_NATIVE: 'true'
      BELLECOUR_FORK_IEXEC_ADDRESS: '0x3eca1B216A7DF1C7689aEb259fFB83ADFB894E7f'
      MONGO_HOST: market-mongo
      REDIS_HOST: market-redis
      RATE_LIMIT_MAX: 10000
      RATE_LIMIT_PERIOD: 60000
      MAX_OPEN_ORDERS_PER_WALLET: 1000
    depends_on:
      - bellecour-fork-healthy
      - market-redis-healthy
      - market-mongo-healthy

  - name: market-api-healthy
    image: bash
    commands:
      - while ! nc -z market-api 3000 ; do sleep 1 ; done && echo "market-api ready"
    depends_on:
      - market-api
      - market-watcher

  - name: voucher-subgraph-deployer
    # https://github.com/iExecBlockchainComputing/iexec-voucher-subgraph
    image: iexechub/voucher-subgraph-deployer:1.0.0
    pull: always
    environment:
      RPC_URL: http://bellecour-fork:8545
      GRAPHNODE_URL: http://graphnode:8020
      IPFS_URL: http://ipfs:5001
      VOUCHER_HUB_ADDRESS: '0x3137B6DF4f36D338b82260eDBB2E7bab034AFEda'
    commands:
      - export VOUCHER_HUB_START_BLOCK=$(cat local-stack-env/BELLECOUR_FORK_BLOCK)
      - cd /iexec-voucher-subgraph && npm run all
    depends_on:
      - bellecour-fork-healthy
      - ipfs-healthy
      - graphnode-healthy

  - name: custom-token-chain
    detach: true
    image: 'iexechub/poco-chaintest:5.3.2-token-openethereum'
    expose:
      - 8545

  - name: custom-token-chain-healthy
    image: bash
    commands:
      - while ! nc -z custom-token-chain 8545 ; do sleep 1 ; done && echo "custom-token-chain ready"
    depends_on:
      - custom-token-chain

  - name: stack-ready
    image: bash
    commands:
      - echo "all services ready"
    depends_on:
      - bellecour-fork-healthy
      - sms-healthy
      - sms-gramine-healthy
      - result-proxy-healthy
      - market-api-healthy
      - ipfs-healthy
      - graphnode-healthy
      - custom-token-chain-healthy
      - voucher-subgraph-deployer

  ### START LOCAL STACK END ###

  - name: install
    image: node:18
    pull: always
    commands:
      - node -v
      - npm -v
      - npm ci

  - name: build
    image: node:18
    pull: always
    commands:
      - npm run build
    depends_on:
      - install

  - name: format
    image: node:18.19
    commands:
      - npm run check-format
    depends_on:
      - build

  - name: lint
    image: node:18.19
    commands:
      - npm run lint
    depends_on:
      - build

  - name: test
    image: node:18
    pull: always
    environment:
      ALCHEMY_API_KEY:
        from_secret: alchemy_api_key
      INFURA_PROJECT_ID:
        from_secret: infura_project_id
      ETHERSCAN_API_KEY:
        from_secret: etherscan_api_key
    commands:
      - apt update
      - apt install xxd
      - node -v
      - npm -v
      - npm -g install .
      - npm test
    depends_on:
      - build
      - stack-ready

  - name: code analysis
    # issue with sonarsource/sonar-scanner-cli:latest
    # https://community.sonarsource.com/t/error-running-sonarsource-sonar-scanner-cli-latest/116539
    # 5.0.1 is working
    image: sonarsource/sonar-scanner-cli:5
    pull: always
    environment:
      SONAR_TOKEN:
        from_secret: sonar_token
      SONAR_HOST:
        from_secret: sonar_host
    commands:
      - sonar-scanner -Dsonar.host.url=$SONAR_HOST -Dsonar.branch.name=$DRONE_BRANCH
    depends_on:
      - test

  - name: test node 20
    image: node:20
    pull: always
    environment:
      ALCHEMY_API_KEY:
        from_secret: alchemy_api_key
      INFURA_PROJECT_ID:
        from_secret: infura_project_id
      ETHERSCAN_API_KEY:
        from_secret: etherscan_api_key
    commands:
      - apt update
      - apt install xxd
      - node -v
      - npm -v
      - npm -g install .
      - npm test
    when:
      event:
        - tag
    depends_on:
      - build
      - stack-ready
      - test

---
kind: pipeline
type: docker
name: publish dry-run

trigger:
  event:
    exclude:
      - promote

steps:
  - name: install
    image: node:18
    pull: always
    commands:
      - node -v
      - npm -v
      - npm ci

  - name: build
    image: node:18
    commands:
      - npm run build
    depends_on:
      - install

  - name: format
    image: node:18.19
    commands:
      - npm run check-format
    depends_on:
      - build

  - name: lint
    image: node:18.19
    commands:
      - npm run lint
    depends_on:
      - build

  - name: npm publish dry-run
    image: node:18
    commands:
      - npm publish --dry-run

  - name: docker publish dry-run
    image: plugins/docker
    pull: always
    settings:
      repo: iexechub/iexec-sdk
      dockerfile: Dockerfile
      dry_run: true

---
kind: pipeline
type: docker
name: publish nightly

trigger:
  event:
    - promote
  target:
    - nightly
  branch:
    - next
    - new

steps:
  - name: install
    image: node:18
    pull: always
    commands:
      - node -v
      - npm -v
      - npm ci

  - name: build
    image: node:18
    commands:
      - npm run build
    depends_on:
      - install

  - name: format
    image: node:18.19
    commands:
      - npm run check-format
    depends_on:
      - build

  - name: lint
    image: node:18.19
    commands:
      - npm run lint
    depends_on:
      - build

  - name: set-version-nightly
    image: node:18
    commands:
      - eval npm pkg set version="$(npm pkg get version)-nightly-$DRONE_COMMIT"

  - name: npm publish
    image: plugins/npm
    pull: always
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token
      tag: ${DRONE_BRANCH}
    depends_on:
      - format
      - lint
      - build
      - set-version-nightly

  - name: docker publish
    image: plugins/docker
    pull: always
    settings:
      registry: docker-regis.iex.ec
      repo: docker-regis.iex.ec/iexec-sdk
      dockerfile: Dockerfile
      username:
        from_secret: nexus-user
      password:
        from_secret: nexus-password
      tags:
        - ${DRONE_BRANCH}
        - ${DRONE_BRANCH}-${DRONE_COMMIT}

---
kind: pipeline
type: docker
name: publish latest

# promote latest on tag semver tags
trigger:
  event:
    - promote
  target:
    - latest
  ref:
    include:
      - refs/tags/v[0-9]*.*[0-9].*[0-9]
    exclude:
      - refs/tags/v*.*.*.*
      - refs/tags/v*-*
      - refs/tags/v*[a-zA-Z]*

steps:
  - name: install
    image: node:18
    pull: always
    commands:
      - node -v
      - npm -v
      - npm ci

  - name: build
    image: node:18
    commands:
      - npm run build
    depends_on:
      - install

  - name: format
    image: node:18.19
    commands:
      - npm run check-format
    depends_on:
      - build

  - name: lint
    image: node:18.19
    commands:
      - npm run lint
    depends_on:
      - build

  - name: npm publish
    image: plugins/npm
    pull: always
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token
      tag: latest
    depends_on:
      - format
      - lint
      - build

  - name: docker publish
    image: plugins/docker
    pull: always
    settings:
      repo: iexechub/iexec-sdk
      dockerfile: Dockerfile
      tags:
        - latest
        - ${DRONE_TAG##v}
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
